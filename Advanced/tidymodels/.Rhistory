pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages
two_class_example
metrics(two_class_example, truth, predicted)
yardstick::metrics(two_class_example, truth, predicted)
# package loading ---------------------------------------------------------
options(scipen=999)
two_class_example
#### 2. 데이터 불러오기 및 살펴보기 ####
foreign::read.spss("data_spss_Koweps2014.sav") -> raw_welfare
#### 3. 데이터 전처리 ####
welfare <- as_tibble(raw_welfare) %>%
rename(sex = h0901_4, # 성별
birth = h0901_5, # 출생연도
income = h09_din) %>%
select(sex, birth, income)
## install.packages("pacman")
## install.packages("foreign")
pacman::p_load(tidyverse, magrittr, foreign)
#### 2. 데이터 불러오기 및 살펴보기 ####
foreign::read.spss("data_spss_Koweps2014.sav") -> raw_welfare
raw_welfare %>%
glimpse() # 변수 살펴보기: 총 1081개의 변수가 있음
?metrics
??metrics
solubility_test
hpc_cv
# metrics: General Function to Estimate Performance
yardstick::metrics(two_class_example, truth, predicted)
two_class_example
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages including yardstick
two_class_example
# package loading ---------------------------------------------------------
options(scipen=999)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages including yardstick
# package loading ---------------------------------------------------------
options(scipen=999)
if (!require("pacman")) install.packages("pacman")
# package loading ---------------------------------------------------------
options(scipen=999)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages including yardstick
two_class_example
# metrics: General Function to Estimate Performance
yardstick::metrics(two_class_example, truth, predicted)
hpc_cv
hpc_cv %>%
as_tibble()
hpc_cv %>%
as_tibble() %>%
group_by(Resample)
hpc_cv %>%
as_tibble() %>%
group_by(Resample) %>%
metrics(obs, pred, VF:L)
multi_metric <- metric_set(rmse, rsq, ccc)
class_metrics <- metric_set(accuracy, kap)
hpc_cv %>%
group_by(Resample) %>%
class_metrics(obs, estimate = pred)
two_class_example %>%
roc_auc(truth, Class1)
hpc_cv %>%
as_tibble() %>%
precision(obs, pred)
hpc_cv %>%
as_tibble() %>%
precision(obs, pred, estimator = "micro")
data("solubility_test")
mse_vec(
truth = solubility_test$solubility,
estimate = solubility_test$prediction
)
data("solubility_test")
mse_vec(
truth = solubility_test$solubility,
estimate = solubility_test$prediction
)
library(yardstick)
data("solubility_test")
mse_vec(
truth = solubility_test$solubility,
estimate = solubility_test$prediction
)
mse_vec(truth = "apple", estimate = 1)
hpc_cv %>%
as_tibble() %>%
group_by(Resample) %>%
metrics(obs, pred, VF:L)
hpc_cv
hpc_cv %>%
conf_mat(obs, pred)
hpc_cv %>%
filter(Resample == "Fold01")
hpc_cv %>%
filter(Resample == "Fold01") %>%
conf_mat(obs, pred)
hpc_cv
hpc_cv %>%
as_tibble()
hpc_cv %>%
as_tibble() %>%
filter(Resample == "Fold01") %>%
conf_mat(obs, pred)
hpc_cv %>%
group_by(Resample) %>%
conf_mat(obs, pred)
hpc_cv %>%
group_by(Resample) %>%
conf_mat(obs, pred) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied)
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n())
hpc_cv %>%
group_by(Resample) %>%
conf_mat(obs, pred) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) -> cells_per_resample
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample")
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample") %>%
# Compute the proportions
mutate(prop = value/total)
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample") %>%
# Compute the proportions
mutate(prop = value/total) %>%
group_by(name)
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample") %>%
# Compute the proportions
mutate(prop = value/total) %>%
group_by(name) %>%
# Average
summarize(prop = mean(prop))
mean_cmat <- matrix(counts_per_resample$prop, byrow = TRUE, ncol = 4)
mean_cmat <- matrix(counts_per_resample$prop, byrow = TRUE, ncol = 4)
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample") %>%
# Compute the proportions
mutate(prop = value/total) %>%
group_by(name) %>%
# Average
summarize(prop = mean(prop)) -> counts_per_resample
mean_cmat <- matrix(counts_per_resample$prop, byrow = TRUE, ncol = 4)
mean_cmat
mean_cmat <- matrix(counts_per_resample$prop, byrow = TRUE, ncol = 4)
rownames(mean_cmat) <- levels(hpc_cv$obs)
colnames(mean_cmat) <- levels(hpc_cv$obs)
round(mean_cmat, 3)
autoplot(mean_cmat, type = "heatmap")
autoplot(cm, type = "heatmap")
autoplot(cm, type = "heatmap")
round(mean_cmat, 3) -> cm
autoplot(cm, type = "heatmap")
cm
cm
cm %>% autoplot(type = "heatmap")
cm %>%
as_tibble() %>% autoplot(type = "heatmap")
counts_per_resample
ggplot2::autoplot(type = "heatmap")
ggplot2::autoplot(cm, type = "heatmap")
round(mean_cmat, 3) -> cm
ggplot2::autoplot(cm, type = "heatmap")
?autoplot
ggplot2::autoplot(cm)
mean_cmat
hpc_cv %>%
as_tibble() %>%
group_by(Resample) %>%
metrics(obs, pred, VF:L)
hpc_cv %>%
conf_mat(obs, pred)
hpc_cv %>%
conf_mat(obs, pred) -> cm
ggplot2::autoplot(cm)
ggplot2::autoplot(cm, type = "heatmap")
round(mean_cmat, 3)
source("~/R/kjsang/Advanced/packagelist.R")
as_tibble(iris)
tibble(x = 1:5,
y = 1,
z = x ^ 2 + y)
tribble(
~x, ~y,  ~z,
"a", 2,  3.6,
"b", 1,  8.5
)
tibble(x = 1:3,
y = list(1:5, 1:10, 1:20))
tibble(x = 1:3,
y = list(1:5, 1:10, 1:20)) -> tibbledata
# # A tibble: 3 x 2
#       x y
#   <int> <list>
# 1     1 <int [5]>
# 2     2 <int [10]>
# 3     3 <int [20]>
# List-columns are often created by tidyr::nest(), but they can be useful to create by hand.
tibbledata %>%
tidyr::unnest(y)
