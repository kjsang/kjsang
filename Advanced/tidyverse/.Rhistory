pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages including yardstick
pacman::p_load(tidyverse, magrittr, # helper packages
rstatix)
diamonds %>% rstatix::get_summary_stats()
diamonds %>% glimpse()
# package loading ---------------------------------------------------------
options(scipen=999)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # modeling packages including yardstick
two_class_example
# metrics: General Function to Estimate Performance
yardstick::metrics(two_class_example, truth, predicted)
two_class_example %>%
roc_auc(truth, Class1)
hpc_cv %>%
as_tibble() %>%
precision(obs, pred, estimator = "micro")
hpc_cv %>%
as_tibble() %>%
group_by(Resample) %>%
metrics(obs, pred, VF:L)
class_metrics <- metric_set(accuracy, kap)
hpc_cv %>%
group_by(Resample) %>%
class_metrics(obs, estimate = pred)
hpc_cv %>%
as_tibble() %>%
filter(Resample == "Fold01") %>%
conf_mat(obs, pred)
hpc_cv %>%
group_by(Resample) %>%
conf_mat(obs, pred) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) -> cells_per_resample
hpc_cv %>%
group_by(Resample) %>%
summarize(total = n()) %>%
left_join(cells_per_resample, by = "Resample") %>%
# Compute the proportions
mutate(prop = value/total) %>%
group_by(name) %>%
# Average
summarize(prop = mean(prop)) -> counts_per_resample
mean_cmat <- matrix(counts_per_resample$prop, byrow = TRUE, ncol = 4)
rownames(mean_cmat) <- levels(hpc_cv$obs)
colnames(mean_cmat) <- levels(hpc_cv$obs)
round(mean_cmat, 3)
hpc_cv %>%
conf_mat(obs, pred) -> cm
ggplot2::autoplot(cm, type = "heatmap")
diamonds %>%
ggplot(mapping = aes(x = cut)) +
geom_bar()
diamonds %>%
ggplot(mapping = aes(x = cut)) +
geom_bar(col = cut) # x축에 cut변수를 표시
diamonds %>%
ggplot(mapping = aes(x = cut)) +
geom_bar(color = cut) # x축에 cut변수를 표시
diamonds %>%
ggplot(mapping = aes(x = cut, fill = cut)) +
geom_bar() # x축에 cut변수를 표시
diamonds %>%
ggplot(mapping = aes(x = cut, # x축에 cut변수를 표시
fill = cut)) + # 색상 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
ggplot(mapping = aes(x = cut, y = freq, # x축에 cut변수를 표시
fill = cut)) + # 색상 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
ggplot(mapping = aes(x = cut, y = freq)) + # x축에 cut변수를 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(color)
diamonds %>%
group_by(color) %>%
summarise(cut_n = n(cut))
diamonds %>%
summarise(cut_n = n(cut),
color_n = n(color))
)
)
diamonds %>%
group_by(cut, color) %>%
summarise(n = n())
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup()
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n)) + # x축에 cut변수를 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = color, y = n)) + # x축에 cut변수를 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n)) + # x축에 cut변수를 표시
geom_bar(fill = color,
stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n, fill = color)) + # x축에 cut변수를 표시
geom_bar(fill = color,
stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n)) + # x축에 cut변수를 표시
geom_bar(fill = color,
stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n)) + # x축에 cut변수를 표시
geom_bar(stat = "identity") # 자동으로 y축을 count함
diamonds %>%
group_by(cut, color) %>%
summarise(n = n())
diamonds %>%
group_by(cut) %>%
summarise(n = n()) %>%
ungroup() %>%
ggplot(mapping = aes(x = cut, y = n)) + # x축에 cut변수를 표시
geom_bar(stat = "identity") # 막대의 높이를 y 변수의 원값으로 매핑 가능
diamonds %>%
group_by(cut) %>%
summarise(n = n())
diamonds %>%
group_by(cut) %>%
summarise(n = n())
diamonds
diamonds %>%
ggplot(mapping = aes(x = cut, # x축에 cut변수를 표시
fill = cut)) + # 색상 표시
geom_bar() # 자동으로 y축을 count함
diamonds %>%
group_by(cut) %>%
summarise(n = n())
diamonds %>%
ggplot() + # x축에 n 수를 표시
stat_summary(
aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
diamonds %>%
ggplot() + # x축에 n 수를 표시
stat_summary(
aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
diamonds %>%
ggplot() +
stat_summary( # 데이터의 요약값을 표현하고 싶을 때 사용
aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = mean
)
diamonds %>%
ggplot() +
stat_summary( # 데이터의 요약값을 표현하고 싶을 때 사용
aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
diamonds %>%
ggplot(fill = cut) +
stat_summary( # 데이터의 요약값을 표현하고 싶을 때 사용
aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
mpg %>%
geom_jitter(x = displ, y = hwy)
mpg %>%
ggplot() +
geom_jitter(x = displ, y = hwy)
mpg %>%
ggplot() +
geom_jitter(x = displ, y = hwy)
mpg %>%
ggplot() +
geom_jitter(aes(x = displ, y = hwy))
mpg %>%
ggplot() +
geom_jitter(aes(x= cty, y = hwy))
my_variable <- 10
my_variable
flights
nycflights13::flights
nycflights13::flights %>%
summarize(n_NA = n(is.na()))
pacman::p_load(tidyverse, magrittr, # helper packages
rstatix) # statistics tool
nycflights13::flights %>%
summarize(n_NA = n(is.na()))
nycflights13::flights %>%
summarize(n_NA = n(is.na))
nycflights13::flights %>%
summarize(n_NA = n(is.na(df)))
nycflights13::flights
nycflights13::flights %>% get_summary_stats()
nycflights13::flights %>% is.na()
nycflights13::flights %>% is.na() %>%
sum()
# 결측치 확인
nycflights13::flights %>%
filter(!is.na(.))
# 결측치 확인
nycflights13::flights %>%
filter(is.na(.))
# 결측치 확인
nycflights13::flights %>%
filter(!is.na(.))
# 결측치 확인
nycflights13::flights %>%
arrange(dep_time) %>%
tail()
nycflights13::flights %>%
arrange(desc(dep_time))
nycflights13::flights %>%
arrange(desc(is.na(dep_time)))
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time)
# 결측치 확인
nycflights13::flights %>%
arrange(dep_time) %>%
tail()
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time)
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time)
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time) %>%
summarize(NA_dep_time = sum(is.na(dep_time)))
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time) %>%
summarize(NA_dep_time = sum(is.na(.)))
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time) %>%
summarize(NA_dep_time = sum(is.na(.)))
nycflights13::flights %>%
arrange(desc(is.na(dep_time)), dep_time) %>%
summarize(NA_dep_time = sum(is.na(dep_time)))
nycflights13::flights %>%
filter(between(month, 7, 9))
# select 다루기
nycflights13::flights %>%
select(starts_with("dep_"))
# select 다루기
nycflights13::flights %>%
select(starts_with("dep_"), starts_with("arr_"))
nycflights13::flights %>%
select(matches("^(dep|arr)_(time|delay)$"))
variables <- c("dep_time", "dep_delay", "arr_time", "arr_delay")
nycflights13::flights %>%
select(!!variables)
variables <- syms(c("dep_time", "dep_delay", "arr_time", "arr_delay"))
variables
nycflights13::flights %>%
select(!!!variables) # bang-bang-bang operator
nycflights13::flights %>%
select(variables) # bang-bang operator
nycflights13::flights
nycflights13::flights %>%
select(matches("^(dep|arr)_(time|delay)$"))
nycflights13::flights
nycflights13::flights %>%
select(starts_with("dep_"), starts_with("arr_"))
variables <- c("dep_time", "dep_delay", "arr_time", "arr_delay")
variables
nycflights13::flights %>%
select(variables) # bang-bang operator
nycflights13::flights %>%
select(variables)
nycflights13::flights %>%
select(!!variables) # bang-bang operator
nycflights13::flights %>%
select(!!variables)
variables <- syms(c("dep_time", "dep_delay", "arr_time", "arr_delay"))
variables
nycflights13::flights %>%
select(!!!variables) # bang-bang-bang operator
nycflights13::flights %>%
select(contains("_time"))
nycflights13::flights %>%
select(contains("_time"), contains("arr_"))
nycflights13::flights %>%
select(arr_delay, everything())
nycflights13::flights
nycflights13::flights
nycflights13::flights %>%
select(arr_delay, everything())
nycflights13::flights %>%
select(arr_delay, carrier, everything())
# mutate --------------------------------------------------------------------------------------
flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) 1440,
sched_dep_time_mins = sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
# mutate --------------------------------------------------------------------------------------
flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
?%/%
g
pacman::p_load(tidyverse, magrittr, # helper packages
rstatix) # statistics tool
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
1504 %/% 100
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(flights_times, dep_time, dep_time_mins, sched_dep_time,
sched_dep_time_mins)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(flights_times, dep_time, dep_time_mins, sched_dep_time,
sched_dep_time_mins)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(dep_time_mins,sched_dep_time_mins, everything())
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(dep_time_mins,sched_dep_time_mins, flights_times, everything()) %>%
select(flights_times, dep_time, dep_time_mins, sched_dep_time,
sched_dep_time_mins)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(dep_time_mins,sched_dep_time_mins, flights_times, everything())
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(dep_time_mins,sched_dep_time_mins, everything()) %>%
select(dep_time, dep_time_mins, sched_dep_time,
sched_dep_time_mins)
# mutate --------------------------------------------------------------------------------------
nycflights13::flights %>%
mutate(dep_time_mins = (dep_time %/% 100*60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %/% 100*60 + sched_dep_time %% 100) %% 1440) %>%
select(dep_time, dep_time_mins, sched_dep_time,
sched_dep_time_mins)
time2mins <- function(x) {
(x %/% 100 * 60 + x %% 100) %% 1440
}
nycflights13::flights %>%
mutate(dep_time_mins = time2mins(dep_time),
sched_dep_time_mins = time2mins(shed_dep_time))
nycflights13::flights %>%
mutate(dep_time_mins = time2mins(dep_time),
sched_dep_time_mins = time2mins(shed_dep_time))
nycflights13::flights %>%
mutate(dep_time_mins = time2mins(dep_time),
sched_dep_time_mins = time2mins(sched_dep_time))
# 새 변수만 남기고 싶을 땐
flights %>%
transmute(gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hours = gain /hours)
pacman::p_load(tidyverse, magrittr, # helper packages
rstatix, # statistics tool
nycflights13)
# 새 변수만 남기고 싶을 땐
flights %>%
transmute(gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hours = gain /hours)
pacman::p_load(
tidyverse, stringr
)
pacman::p_load(
tidyverse, magrittr,
stringr
)
"문자열입니다" -> string1
'문자열 내에 "인용문"이 사용된 경우 작은 따옴표를 사용하세요.' -> string2
string1 <- "문자열입니다"
string2 <- '문자열 내에 "인용문"이 사용된 경우 작은 따옴표를 사용하세요.'
string2 <- '문자열 내에 \'인용문\'이 사용된 경우 작은 따옴표를 사용하세요.'
string2 <- '문자열 내에 \"인용문\"이 사용된 경우 작은 따옴표를 사용하세요.'
string2 <- '문자열 내에 \'인용문\'이 사용된 경우 작은 따옴표를 사용하세요.'
string2 <- "문자열 내에 \'인용문\'이 사용된 경우 작은 따옴표를 사용하세요."
string2
.libPaths()
KoNLP::useNIADic()
library(KoNLP)
KoNLP::useNIADic()
library(KoNLP)
KoNLP::useNIADic()
.libPaths()
