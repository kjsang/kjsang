visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_null_distribution %>%
visualize(method = "both") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_p_value <- raw_ANOVA_null_distribution %>%
get_p_value(obs_stat = raw_ANOVA_observed_f_statistic,
direction = "greater")
p_value
raw_ANOVA_observed_f_statistic <- raw_ANOVA %>%
specify(height ~ group) %>%
calculate(stat = "F")
raw_ANOVA_p_value <- raw_ANOVA_null_distribution %>%
get_p_value(obs_stat = raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_null_distribution %>%
visualize(method = "both") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
#### 1. package loading ####
pacman::p_load(tidyverse, infer, moderndive, nycflights13, ggplot2movies, tidymodels, tidyr)
# 1. 데이터 불러오기 및 살펴보기
raw_ANOVA <- read_csv("htest04.csv")
dplyr::glimpse(raw_ANOVA)
raw_chi <- read_csv("htest05.csv")
table(raw_chi)
raw_chi %>%
chisq_test(disease ~ smoke)
raw_chi
raw_chi %>%
chisq_test(smoke ~ disease)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
#### 0. 패키지 로드 ####
pacman::p_load(tidyverse, infer, moderndive, nycflights13, ggplot2movies, tidymodels, tidyr)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
raw3
View(raw3)
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
#### 3. 데이터 전처리 ####
raw3 %>%
summarise(group_NA = sum(is.na(group)))
#### 3. 데이터 전처리 ####
raw3 %>%
summarise(group_NA = sum(is.na(group)),
score_NA = sum(is.na(score)))
#### 4. 데이터 분석 ####
raw3 %>%
prop_test(score ~ group,
order = c("b", "c"))
raw3
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group,
order = c("b", "c"),
alternative = "two-sided")
?t_test
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group,
order = c("b", "c"),
conf_level = 0.95,
alternative = "two-sided")
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
?tidyr
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
#### 4. 데이터 분석 ####
raw3 %>%
qqplot()
#### 4. 데이터 분석 ####
raw3 %>%
qqline()
#### 4. 데이터 분석 ####
raw3 %>%
qqline(score)
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
raw3 %>%
specify(height ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t") -> raw3_observed_statistic
raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t") -> raw3_observed_statistic
raw3_null_distribution_1_sample <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "t")
raw3_null_distribution_1_sample %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_1_sample <- raw3_null_distribution_1_sample %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("A", "B"))
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("b", "c"))
raw3_observed_statistic
raw3_null_distribution_2_sample_permute <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_theoretical <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample <- raw3_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample
raw3_p_value_2_sample
boxplot(score ~ group, data = raw4, col=rainbow(3))
boxplot(score ~ group, raw4, col=rainbow(3))
#### 0. 패키지 로드 ####
pacman::p_load(tidyverse, infer, tidyr, tidy)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
?tidyr
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
Rows: 60
Columns: 2
# $ group <chr> "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "…
# $ score <dbl> 200, 235, 267, 300, 375, 500, 399, 423, 357, 244, 453, 4…
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
# # A tibble: 2 x 2
# group mean_score
# <chr>      <dbl>
# 1 b           354.
# 2 c           399
#### 3. 데이터 전처리 ####
# 3.1. 결측값 확인
raw3 %>%
summarise(group_NA = sum(is.na(group)),
score_NA = sum(is.na(score)))
# # A tibble: 1 x 2
# group_NA score_NA
# <int>    <int>
#   1        0        0
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
# # A tibble: 1 x 6
# statistic  t_df p_value alternative lower_ci upper_ci
# <dbl> <dbl>   <dbl> <chr>          <dbl>    <dbl>
# 1     -1.87  26.5  0.0730 two.sided      -93.9     4.47
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("b", "c"))
raw3_observed_statistic
raw3_null_distribution_2_sample_permute <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_theoretical <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample <- raw3_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, skimr, GGally, plotly, viridis, caret, randomForest, e1071, rpart,
xgboost, h2o, corrplot, rpart.plot, corrgram, lightgbm, ggplot2, highcharter,
ggthemes, psych, scales, treemap, treemapify, repr, cowplot, magrittr, ggpubr,
RColorBrewer, plotrix, ggrepel, tidyverse, gridExtra, reshape2, janitor)
pacman::p_load(tidyverse, caret, vip, magrittr)
install.packages("AmesHousing")
?AmesHousing::ames_raw
# 1. skimming datasets
ames <- AmesHousing::make_ames()
dim(ames)
# what is h2o package?
h2o.init()
pacman::p_load(tidyverse, magrittr, # helper packages
rsample, caret, h2o) # modeling process packages
# what is h2o package?
h2o.init()
h2o.clusterInfo()
ames.h2o <- as.h2o(ames)
View(ames.h2o)
pacman::p_load(tidyverse, magrittr, # helper packages
modeldata) # datasets
modeldata::crickets()
modeldata::crickets -> data
data(crickets)
crickets
data(crickets, package = "modeldata") %>%
names()
data(crickets, package = "modeldata")
names(crickets)
# 1.1. plot
crickets %>%
ggplot(aes(x = temp, y = rate,
col = species)) +
geom_point() +
geom_smooth(method = lm, se = F) +
labs(x = "Temperature (C)",
y = "Chirp Rate (per minute")
# 1.1. plot
crickets %>%
ggplot(aes(x = temp, y = rate,
col = species)) +
# Plot points for each data point and color by species
geom_point() +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = F) +
labs(x = "Temperature (C)",
y = "Chirp Rate (per minute")
crickets %>%
lm(rate ~ (temp + species)^2)
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets)
interaction_fit
# 2.1. repgression visualization
par(mfrow = c(1, 2))
plot(interaction_fit, which = 1)
plot(interaction_fit, which = 1)
plot(interaction_fit, which = 3)
plot(interaction_fit, which = 2)
# 2.1. repgression visualization
par(mfrow = c(1, 2))
plot(interaction_fit, which = 1)
plot(interaction_fit, which = 2)
# 2.2.
main_effect_fit <-  lm(rate ~ temp + species, data = crickets)
anova(main_effect_fit, interaction_fit)
summary(main_effect_fit)
plot(plot_data$x, plot_data$y)
plot_data
library(lattice)
plot_data
new_values
new_values <- data.frame(species = "O. exclamationis", temp = 15:20)
new_values
corr_res <- map(mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)
# The first of ten results in the vector:
corr_res[[1]]
corr_res
broom::tidy(corr_res[[1]])
# These results can be “stacked” and added to a ggplot():
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
# These results can be “stacked” and added to a ggplot():
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
corr_res <- map(mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)
# The first of ten results in the vector:
corr_res[[1]]
broom::tidy(corr_res[[1]])
# These results can be “stacked” and added to a ggplot():
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
library(broom)
# These results can be “stacked” and added to a ggplot():
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
# These results can be “stacked” and added to a ggplot():
tidy(corr_res) %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
# These results can be “stacked” and added to a ggplot():
tidy(corr_res) %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
tidy(corr_res)
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor")
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate))
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate)))
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate))
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate))
# These results can be “stacked” and added to a ggplot():
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
crickets %>%
dplyr::group_nest(species)
crickets %>%
dplyr::group_nest(species)
crickets %>%
dplyr::group_nest(species)
crickets %>%
dplyr::group_nest(species)
mutate(model = map(data, ~ lm(rate ~ temp, data = .x))
model_by_species <-
split_by_species %>%
mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
### 3.4 COMBINING BASE R MODELS AND THE TIDYVERSE
split_by_species <-
crickets %>%
dplyr::group_nest(species)
model_by_species <-
split_by_species %>%
mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
model_by_species
model_by_species %>%
mutate(coef = map(model, tidy))
model_by_species %>%
mutate(coef = map(model, tidy)) %>%
select(species, coef)
model_by_species %>%
mutate(coef = map(model, tidy)) %>%
select(species, coef) %>%
unnest(cols = c(coef))
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels) # datasets
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, # modeling packages
modeldata) # package including datasets
modeldata::ames
modeldata::data(amess)
modeldata
modeldata %>%
data(ames)
data(ames, package = "modeldata")
tidymodels_prefer()
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 50, col = "orange")
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 50, col = "orange",
fill = "yellow")
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 30,
col = "orange", fill = "yellow") # 슥삭 꾸며주기
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 20,
col = "orange", fill = "yellow") # 슥삭 꾸며주기
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 100,
col = "orange", fill = "yellow") # 슥삭 꾸며주기
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 10,
col = "orange", fill = "yellow") # 슥삭 꾸며주기
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 30) +
scal_x_log10()
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 30) +
scal_x_log10()
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 50) +
scal_x_log10()
ames %>%
ggplot(aes(x = Sale_Price)) +
geom_histogram(bins = 30) +
scale_x_log10()
ames %<>%
mutate(Sale_Price = log10(Sale_Price))
# 1. 주요변수 탐색
ames %>%
ggplot(aes(x = Sale_Price)) + # Sale_Price를 살펴보자
geom_histogram(bins = 30, # 히스토그램의 간격 조정
col = "orange", fill = "yellow") # 슥삭 꾸며주기
ames_split <- initial_split(ames, prop = 0.80)
ames_train <- training(ames_split)
ames_test  <-  testing(ames_split)
dim(ames_train)
ames_split
# 2. 데이터 전처리
# 2.1. 데이터 분할
set.seed(123)
ames_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)
ames_train <- training(ames_split) # Analysis를 학습으로
ames_test  <-  testing(ames_split) # Assess를 테스트로
dim(ames_train)
ames_split <- rsample::initial_split(ames, prop = 0.80, strata = Sale_Price) # 집값 기준으로 데이터 분할해주세욧
ames_train <- training(ames_split) # Analysis를 학습으로 적재
ames_test  <-  testing(ames_split) # Assess를 테스트로 적재
dim(ames_train)
