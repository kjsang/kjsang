specify(response = height) %>%
hypothesize(null = "point", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "t")
rawN10_null_distribution_1_sample
rawN10_null_distribution_1_sample <- rawN10 %>%
specify(response = height) %>%
hypothesize(null = "p", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "t")
rawN10_null_distribution_1_sample
rawN10_null_distribution_1_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
rawN10_null_distribution_1_sample %>%
visualize() +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_1_sample <- rawN10_null_distribution_1_sample %>%
get_p_value(obs_stat = rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_1_sample
rawN10 %>%
specify(group ~ height) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t")
rawN10 %>%
specify(group ~ height) %>%
hypothesize(null = "point", mu = 40) %>%
calculate(stat = "t") -> rawN10_observed_statistic
rawN10 %>%
specify(response = height) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t")
rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t")
rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t") -> rawN10_observed_statistic
rawN10_null_distribution_1_sample <- rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "t")
rawN10_null_distribution_1_sample %>%
visualize() +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_1_sample <- rawN10_null_distribution_1_sample %>%
get_p_value(obs_stat = rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_1_sample
#### 대응표본 t검정 ####
rawN10_observed_statistic <- rawN10 %>%
specify(group ~ height) %>%
calculate(stat = "t", order = c("A", "B"))
#### 대응표본 t검정 ####
rawN10_observed_statistic <- rawN10 %>%
specify(height ~ group) %>%
calculate(stat = "t", order = c("A", "B"))
observed_statistic
rawN10_observed_statistic
rawN10_null_distribution_2_sample_permute <- rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("A", "B"))
rawN10_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_theoretical <- gss %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
# generate() isn't used for the theoretical version!
calculate(stat = "t", order = c("A", "B"))
rawN10_null_distribution_2_sample_theoretical <- rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
# generate() isn't used for the theoretical version!
calculate(stat = "t", order = c("A", "B"))
rawN10_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample <- rawN10_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample
t_test(x = rawN10,
formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided")
read_csv("htest02d.csv") -> raw_d
read_csv("htest02d.csv") -> raw_d
raw_d
raw_d %<>%
mutate(difference = after - before)
t_test(response = difference,
alternative = "two-sided")
raw_d %>%
t_test(response = difference,
alternative = "two-sided")
raw_d %>%
t_test(response = difference,
alternative = "less")
rawN30 <- read_csv("htest03.csv")
#### 1. package loading ####
pacman::p_load(tidyverse, infer, moderndive, nycflights13, ggplot2movies, tidymodels, tidyr, rstatix)
rawN30 %>%
prop_test(n = 30,
p = 0.5,
detailed = T)
rawN30
rawN30 %>%
infer::prop_test(formula = height ~ group,
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = height ~ group,
alternative = "two-sided",
conf_level = 0.95)
rawN30
rawN30 %>%
infer::prop_test(formula = height ~ group,
order = c("A", "B")
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = group ~ group,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = group ~ height,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
detach("package:rstatix", unload = TRUE)
rawN30 %>%
infer::prop_test(formula = group ~ height,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
t_test(x = rawN10,
formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided")
rawN30 %>%
infer::prop_test(formula = height ~ NULL,
alternative = "two-sided",
conf_level = 0.95)
rawN30 %>%
infer::prop_test(formula = height ~ NULL,
alternative = "two-sided",
p = .2)
rawN30 %>%
infer::prop_test(formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided",
conf_level = 0.95)
# Tidy ANOVA (Analysis of Variance) with infer
raw_ANOVA <- read_csv("htest04.csv")
dplyr::glimpse(raw_ANOVA)
raw_ANOVA
#### 대응표본 t검정 ####
rawN10_observed_statistic <- rawN10 %>%
specify(height ~ group) %>%
calculate(stat = "t", order = c("A", "B"))
rawN10_observed_statistic
rawN10_null_distribution_2_sample_permute <- rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("A", "B"))
rawN10_null_distribution_2_sample_permute
rawN10_null_distribution_2_sample_theoretical <- rawN10 %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
# generate() isn't used for the theoretical version!
calculate(stat = "t", order = c("A", "B"))
rawN10_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample <- rawN10_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = rawN10_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample
t_test(x = rawN10,
formula = height ~ group,
order = c("A", "B"),
alternative = "two-sided")
dplyr::glimpse(raw_ANOVA)
raw_ANOVA %>%
str()
summarise(mean_height = mean(height))
# Tidy ANOVA (Analysis of Variance) with infer
raw_ANOVA <- read_csv("htest04.csv")
raw_ANOVA %>%
group_by(group)
raw_ANOVA %>%
group_by(group) %>%
summarise(mean_height = mean(height))
# 2. 데이터 ANOVA 분석
raw_ANOVA %>%
specify(height ~ group) %>%
calculate(stat = "F")
raw_ANOVA_null_distribution <- raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
raw_ANOVA_observed_f_statistic <- raw_ANOVA %>%
specify(height ~ group) %>%
calculate(stat = "F")
raw_ANOVA_null_distribution <- raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
raw_ANOVA_null_distribution %>%
visualize() +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_null_distribution %>%
visualize(method = "both") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_p_value <- raw_ANOVA_null_distribution %>%
get_p_value(obs_stat = raw_ANOVA_observed_f_statistic,
direction = "greater")
p_value
raw_ANOVA_observed_f_statistic <- raw_ANOVA %>%
specify(height ~ group) %>%
calculate(stat = "F")
raw_ANOVA_p_value <- raw_ANOVA_null_distribution %>%
get_p_value(obs_stat = raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA %>%
specify(height ~ group) %>%
hypothesize(null = "independence") %>%
visualize(method = "theoretical") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
raw_ANOVA_null_distribution %>%
visualize(method = "both") +
shade_p_value(raw_ANOVA_observed_f_statistic,
direction = "greater")
#### 1. package loading ####
pacman::p_load(tidyverse, infer, moderndive, nycflights13, ggplot2movies, tidymodels, tidyr)
# 1. 데이터 불러오기 및 살펴보기
raw_ANOVA <- read_csv("htest04.csv")
dplyr::glimpse(raw_ANOVA)
raw_chi <- read_csv("htest05.csv")
table(raw_chi)
raw_chi %>%
chisq_test(disease ~ smoke)
raw_chi
raw_chi %>%
chisq_test(smoke ~ disease)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
#### 0. 패키지 로드 ####
pacman::p_load(tidyverse, infer, moderndive, nycflights13, ggplot2movies, tidymodels, tidyr)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
raw3
View(raw3)
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
#### 3. 데이터 전처리 ####
raw3 %>%
summarise(group_NA = sum(is.na(group)))
#### 3. 데이터 전처리 ####
raw3 %>%
summarise(group_NA = sum(is.na(group)),
score_NA = sum(is.na(score)))
#### 4. 데이터 분석 ####
raw3 %>%
prop_test(score ~ group,
order = c("b", "c"))
raw3
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group,
order = c("b", "c"),
alternative = "two-sided")
?t_test
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group,
order = c("b", "c"),
conf_level = 0.95,
alternative = "two-sided")
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
?tidyr
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
#### 4. 데이터 분석 ####
raw3 %>%
qqplot()
#### 4. 데이터 분석 ####
raw3 %>%
qqline()
#### 4. 데이터 분석 ####
raw3 %>%
qqline(score)
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
raw3 %>%
specify(height ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t") -> raw3_observed_statistic
raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
calculate(stat = "t") -> raw3_observed_statistic
raw3_null_distribution_1_sample <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "p", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "t")
raw3_null_distribution_1_sample %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_1_sample <- raw3_null_distribution_1_sample %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("A", "B"))
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("b", "c"))
raw3_observed_statistic
raw3_null_distribution_2_sample_permute <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_theoretical <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample <- raw3_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
rawN10_p_value_2_sample
raw3_p_value_2_sample
boxplot(score ~ group, data = raw4, col=rainbow(3))
boxplot(score ~ group, raw4, col=rainbow(3))
#### 0. 패키지 로드 ####
pacman::p_load(tidyverse, infer, tidyr, tidy)
#### 1. 데이터 불러오기 ####
read_csv("score3.csv") -> raw3
?tidyr
#### 2. 데이터 살펴보기 ####
raw3 %>%
dplyr::glimpse()
Rows: 60
Columns: 2
# $ group <chr> "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "…
# $ score <dbl> 200, 235, 267, 300, 375, 500, 399, 423, 357, 244, 453, 4…
raw3 %>%
group_by(group) %>%
summarise(mean_score = mean(score))
# # A tibble: 2 x 2
# group mean_score
# <chr>      <dbl>
# 1 b           354.
# 2 c           399
#### 3. 데이터 전처리 ####
# 3.1. 결측값 확인
raw3 %>%
summarise(group_NA = sum(is.na(group)),
score_NA = sum(is.na(score)))
# # A tibble: 1 x 2
# group_NA score_NA
# <int>    <int>
#   1        0        0
#### 4. 데이터 분석 ####
raw3 %>%
t_test(formula = score ~ group, # 그룹별 점수에 대한 t-test
order = c("b", "c"),
conf_level = 0.95, # 신뢰도 95% 수준에서 검정
alternative = "two-sided") # 평균 동일한지이기 때문에 양측검정
# # A tibble: 1 x 6
# statistic  t_df p_value alternative lower_ci upper_ci
# <dbl> <dbl>   <dbl> <chr>          <dbl>    <dbl>
# 1     -1.87  26.5  0.0730 two.sided      -93.9     4.47
#### 4.1. 데이터 시각화 ####
raw3 %>%
ggplot(aes(x = group, y = score)) +
geom_boxplot()
raw3_observed_statistic <- raw3 %>%
specify(score ~ group) %>%
calculate(stat = "t", order = c("b", "c"))
raw3_observed_statistic
raw3_null_distribution_2_sample_permute <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_theoretical <- raw3 %>%
specify(score ~ group) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("b", "c"))
raw3_null_distribution_2_sample_permute %>%
visualize() +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_theoretical %>%
visualize(method = "theoretical") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_null_distribution_2_sample_permute %>%
visualize(method = "both") +
shade_p_value(raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample <- raw3_null_distribution_2_sample_permute %>%
get_p_value(obs_stat = raw3_observed_statistic,
direction = "two-sided")
raw3_p_value_2_sample
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, skimr, GGally, plotly, viridis, caret, randomForest, e1071, rpart,
xgboost, h2o, corrplot, rpart.plot, corrgram, lightgbm, ggplot2, highcharter,
ggthemes, psych, scales, treemap, treemapify, repr, cowplot, magrittr, ggpubr,
RColorBrewer, plotrix, ggrepel, tidyverse, gridExtra, reshape2, janitor)
