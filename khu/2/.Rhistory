log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index))
AirPassengers %>%
decompose() -> AirPassengers_decompose
AirPassengers_decompose_adj <- AirPassengers - AirPassengers_decompose$seasonal
plot(AirPassengers_decompose_adj)
?ts.plot
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2),
xlab="year", ylab="counts")
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"),
col = c(1,2,4), lty = c(1,1,2))
?ts.plot
forecast_Air
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima()
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, # modeling packages
ggfortify, changepoint, strucchange, ggpmisc)
Nile
Nile %>%
auto.arima
Nile %>%
auto.arima %>%
forecast()
Nile %>%
auto.arima %>%
forecast() %>%
plot()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
sna # modeling packages
)
rbind(
c(0,1,1,1,0),
c(1,0,0,0,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
library(KoNLP)
install.packages("rJava")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages("tm")
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
multilinguer::install_jdk()
multilinguer::install_jdk()
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library(KoNLP)
install.packages("wordcloud")
install.packages("tm")
library(KoNLP)
library(KoNLP)
installed.packages("memoise")
installed.packages("memoise")
library('rJava')
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
multilinguer::install_jdk()
rJava::.jinit()
library(KoNLP)
library(KoNLP)
install.packages("rJava")
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
multilinguer::install_jdk()
rJava::.jinit()
rJava::.jinit()
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
installed.packages("memoise")
library(KoNLP)
install.packages("rJava")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
library('KoNLP')
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
Sys.which("make")
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library('rJava')
library('memoise')
library('KoNLP')
dyn.load()
dyn.load(paste0(system2("/usr/libexec/java_home",stdout=T),
"/jre/lib/server/libjvm.dylib"))
dir(paste0(system2('/usr/libexec/java_home', stdout = TRUE)))
dir(paste0(system2('/usr/libexec/java_home', stdout = TRUE)))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
install.packages("KoNLP")
library(KoNLP)
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
library('rJava')
library('memoise')
library('KoNLP')
multilinguer::install_jdk()
rJava::.jinit()
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("rJava", configure.args="--disable-jri"))
install.packages("rJava", configure.args="--disable-jri")
library('rJava')
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
library(rJava)
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
rJava::.jinit()
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
FilePath rLdScriptPath = options.scriptsPath().complete("session/r-ldpath");
FilePath supportingFilePath = options.supportingFilePath()
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
'/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib'
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
library(rJava)
library(KoNLP)
remove.packsges("rJava")
remove.packages("rJava")
remove.packages("rJava")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
multilinguer::install_jdk()
> library(multilinguer)
library(multilinguer)
multilinguer::install_jdk()
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
library(KoNLP)
library('rJava')
library("rcdk")
install.packages("rcdk")
library("rcdk")
library(rJava)
library(rJava)
library('KoNLP')
library('KoNLP')
library('KoNLP')
library('KoNLP')
useSejongDic()
extractNoun("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
SimplePos09("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
SimplePos22("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
library(KoNLP)
library(KoNLP)
print("에이는 삼입니다.")
print("에이는 삼입니다.")
(print("에이는 삼입니다."))
(print("에이는 삼입니다."))
if (a == 3)
if (a == 3) (print("에이는 삼입니다."))
if (a == 3) (print("에이는 삼입니다."))
if (a == 3) (print("에이는 삼입니다."))
if (a == 3) (print("에이는 삼입니다."))
a <- 3
if (a == 3) (print("에이는 삼입니다."))
a <- 3
if (a == 3) (print("에이는 삼입니다."))
a <- 3
if (a == 3) (print("에이는 삼입니다."))
if (a == 4) (print("에이는 삼입니다."))
if (a == 4) (print("에이는 삼입니다."))
if (a == 4) (print("에이는 삼입니다.")) (print("에이는 사입니다."))
(print("에이는 삼입니다.")),
(print("에이는 사입니다."))
if (a == 4)
if (a == 4)
(print("에이는 삼입니다.")),
(print("에이는 사입니다."))
(print("에이는 삼입니다.")) (print("에이는 사입니다."))
if (a == 4)
if (a == 4) (print("에이는 삼입니다.")) (print("에이는 사입니다."))
(print("에이는 사입니다."))
if (a == 4)
(print("에이는 삼입니다.")) else
(print("에이는 사입니다."))
if (a == 4)
(print("에이는 삼입니다.")) else
(print("에이는 사입니다."))
if (a == 4)
(print("에이는 삼입니다.")) else
(print("에이는 사입니다."))
if (a == 4)
(print("에이는 삼입니다.")) else
(print("에이는 사입니다."))
a <- 3
if (a == 4)
if (a == 4) (print("에이는 삼입니다.")) else
(print(a))
if (a == 4) (print("에이는 삼입니다.")) else
(print(a))
if (a == 4) {print("에이는 삼입니다.")} else
{print(a)}
if (a == 4) {print("에이는 삼입니다.")} else
{print(a)}
if (a == 4) {print("에이는 삼입니다.")} else {print(a)}
if (a == 4) {print("에이는 삼입니다.")} else {print(a)}
if (a == 4) {print("에이는 삼입니다.")} else {print(a)}
if (a == 4) {
print("에이는 삼입니다.")
} else {
print(a)
}
print("A is neither 3 or 4")
?%%
??%%
if (a == 4) {
print("A is four")
} else if (a == 3) {
print("A is Three")
} else {
print("A is neither 3 or 4")
}
a <- 5
if (a == 4) {
print("A is four")
} else if (a == 3) {
print("A is Three")
} else {
print("A is neither 3 or 4")
}
Score <- NULL
Score %>%
as_tibble()
pacman::p_load(tidyverse)
Score %>%
as_tibble()
Score %>%
as_tibble() %>%
bind_rows(score = 1)
Score %>%
as_tibble() %>%
bind_rows(score <- 1)
bind_rows(score <- c(1,2)
Score %>%
as_tibble() %>%
bind_rows(score <- c(1,2))
Score %>%
as_tibble()
mutate(score = 1)
Score <- 85
Score %>%
as_tibble()
Score %>%
as_tibble() %>%
rename(score = value)
Score %>%
as_tibble() %>%
rename(score = value) %>%
mutate(GPA = ifelse(score >= 90, "A",
ifelse(score >= 80, "B",
ifelse(score >= 70, "C",
"F"))))
Score %>%
as_tibble() %>%
rename(score = value) %>%
mutate(GPA = ifelse(score >= 90, "A",
ifelse(score >= 80, "B",
ifelse(score >= 70, "C",
"F"))))
Score %>%
as_tibble() %>%
rename(score = value) %>%
mutate(GPA = ifelse(score >= 90, "A",
ifelse(score >= 80, "B",
ifelse(score >= 70, "C",
"F")))) %>%
mutate(id = 1:length(score))
Score <- c(85, 90, 45, 76)
Score %>%
as_tibble() %>%
rename(score = value) %>%
mutate(GPA = ifelse(score >= 90, "A",
ifelse(score >= 80, "B",
ifelse(score >= 70, "C",
"F")))) %>%
mutate(id = 1:length(score))
Score %>%
as_tibble() %>%
rename(score = value) %>%
mutate(GPA = ifelse(score >= 90, "A",
ifelse(score >= 80, "B",
ifelse(score >= 70, "C",
"F")))) %>%
mutate(id = 1:length(score)) %>%
select(id, everything())
ifelse(answer == "여", "안녕하십니까 여성회원님!", "안녕하십니까 남성회원님!")
answer <- "여"
if (answer == "여") {
print("안녕하십니까 여성회원님!")
} else if (answer == "남") {
print("안녕하십니까 남성회원님!")
} else {
print("안녕하십니까 회원님!")
}
ifelse(answer == "여", "안녕하십니까 여성회원님!", "안녕하십니까 남성회원님!")
fruit <- "banana"
fruit <- c("banana", "apple", "grape", "kiwi", "tomato")
fruit %>%
as_tibble() %>%
rename(fruit = value)
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(score)) %>%
select(id, everything())
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(fruit)) %>%
select(id, everything())
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(fruit)) %>%
select(id, everything()) %>%
print(fruit)
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(fruit)) %>%
select(id, everything())
?for
?for
??for
??for
for (i in length(fruit)) {
}
print(result)
for (i in length(fruit)) {
result = 1+i
print(result)
}
result = i
for (i in length(fruit)) {
result = i
print(result)
}
print(i)
print(result)
for (i in 1:length(fruit)) {
result = i
print(result)
}
for (i in 1:length(fruit)) {
print(fruit[i])
}
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(fruit)) %>%
select(id, everything())
}
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오")
if(answer == "A")
print(paste(answer, "님이 입장하셨습니다.")
}
if(answer == "A") {
print(paste(answer, "님이 입장하셨습니다."))
}
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오")
if(answer == "A") {
print(paste(answer, "님이 입장하셨습니다."))
}
}
AskAnswer()
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오")
if(answer == "A") {
print(paste(answer, "님이 입장하셨습니다."))
}
}
AskAnswer()
}
print(paste(answer, "님이 입장하셨습니다."))
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오")
print(paste(answer, "님이 입장하셨습니다."))
}
AskAnswer()
answer <- readline("이름을 입력하십시오:")
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오:")
print(paste(answer, "님이 입장하셨습니다."))
}
AskAnswer()
print(paste0(answer, "님이 입장하셨습니다."))
#
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오")
print(paste0(answer, "님이 입장하셨습니다."))
}
AskAnswer()
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오:")
print(paste0(answer, "님이 입장하셨습니다."))
}
AskAnswer()
ifelse(answer == "여", "안녕하십니까 여성회원님!", "안녕하십니까 남성회원님!")
answer <- "여"
if (answer == "여") {
print("안녕하십니까 여성회원님!")
} else if (answer == "남") {
print("안녕하십니까 남성회원님!")
} else {
print("안녕하십니까 회원님!")
}
ifelse(answer == "여", "안녕하십니까 여성회원님!", "안녕하십니까 남성회원님!")
fruit <- c("banana", "apple", "grape", "kiwi", "tomato")
fruit %>%
as_tibble() %>%
rename(fruit = value) %>%
mutate(id = 1:length(fruit)) %>%
select(id, everything())
for (i in 1:length(fruit)) {
result = i
print(result)
}
for (i in 1:length(fruit)) {
print(fruit[i])
}
# 김주상 답안
AskAnswer <- function()
{
answer <- readline("이름을 입력하십시오:")
print(paste0(answer, "님이 입장하셨습니다."))
}
AskAnswer()
