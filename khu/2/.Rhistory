pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, tidytext, tm, # modeling packages
ggpubr) #  visualization
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, tidytext, tm, # modeling packages
arules, visNetwork, arulesViz, #  설치하라함
ggpubr) #  visualization
# 2. 데이터 탐색
Groceries
# 2. 데이터 탐색
Groceries
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, tidytext, tm, # modeling packages
arules, visNetwork, arulesViz, #  설치하라함
ggpubr) #  visualization
# 2. 데이터 탐색
Groceries
# 2. 데이터 탐색
data("Groceries")
Groceries %>%
glimpse()
Groceries %>% summary
Groceries %>%
as_tibble()
Groceries %>%
apriori(parameter = list(suppor = 0.001,
confidence = 0.5)) -> rules
rules
plot(rules)
rules %>%
sort(by = "lift")
rules %>%
sort(by = "lift") %>%
head(10)
rules %>%
sort(by = "lift") %>%
head(10) %>%
inspect()
rules %>%
sort(by = "lift") %>%
head(10) %>%
inspect() -> subrules
subrules %>%
plot(method = "graph",
control = list(type = "items"))
rules %>%
sort(by = "lift") %>%
head(10) %>%
inspect() -> subrules
subrules %>%
plot(method = "graph",
control = list(type = "items"))
plot(subrules, method = "graph",
control = list(type = "items"))
plot(subrules, method = "graph",
control = list(type = "items"))
plot(subrules,
method = "graph",
control = list(type = "items"))
plot(subrules,
method = "graph",
control = list(type = "items"))
rules %>%
sort(by = "lift") %>%
head(10) -> subrules
plot(subrules,
method = "graph",
control = list(type = "items"))
data(Adult)
Adults %>%
apriori(parameter = list(suppor = 0.001,
confidence = 0.5)) -> Adults_rules
data(Adult)
Adult %>%
apriori(parameter = list(suppor = 0.001,
confidence = 0.5)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
Adult_rules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Groceries %>%
apriori(parameter = list(support = 0.001,
confidence = 0.5)) -> rules
rules %>%
sort(by = "lift") %>%
head(10) -> subrules
plot(subrules,
method = "graph",
control = list(type = "items"))
# 2.1. 데이터 탐색: Adult
data(Adult)
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6),
appearance = list(rhs = c("income = small",
"income = large"),
default = "lhs"),
control = list(verbose = F)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult_rules %>%
sort(by = "lift") -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
Adult_rules %>%
sort(by = "lift") %>%
head(100)-> Adult_subrules
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
Adult_rules %>%
sort(by = "lift") -> Adult_subrules
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
rm(list = ls)
rm(list = ls())
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, tidygraph # modeling packages
)
pacman::p_load(tidyverse, magrittr, # helper packages
sna # modeling packages
)
rbind(
c(0,1,1,1,0),
c(1,0,0,1,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
rbind(
c(0,1,1,1,0),
c(1,0,0,0,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble # modeling packages
)
USAccDeaths %>% as_tsibble()
tourism
tourism %>%
filter(Purpose == "Holiday") %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
tourism %>%
mutate(Year = lubridate::year(Quarter)) %>%
index_by(Year) %>%
group_by(Region, State, Purpose) %>%
summarise(Trips = sum(Trips)) %>%
ungroup()
pedestrian %>%
mutate(
Day = lubridate::wday(Date, label = TRUE),
Weekend = (Day %in% c("Sun", "Sat"))
) %>%
ggplot(aes(x = Time, y = Count, group = Date)) +
geom_line(aes(col = Weekend)) +
facet_grid(Sensor ~ .)
USAccDeaths
USAccDeaths %>% as_tsibble()
AirPassengers %>%
as_tsibble()
pedestrian %>%
mutate(
Day = lubridate::wday(Date, label = TRUE),
Weekend = (Day %in% c("Sun", "Sat"))
) %>%
ggplot(aes(x = Time, y = Count, group = Date)) +
geom_line(aes(col = Weekend)) +
facet_grid(Sensor ~ .)
pedestrian
tourism
AirPassengers
tourism
tourism %>%
mutate(Year = lubridate::year(Quarter))
AirPassengers
tourism %>%
mutate(Year = lubridate::year(Quarter))
AirPassengers %>%
decompose()
AirPassengers %>%
decompose() %>%
tidy()
AirPassengers %>%
decompose() %>%
as_tibble()
AirPassengers %>%
decompose() %>%
as_tsibble()
AirPassengers %>%
decompose() %>%
unnest(seasonal)
AirPassengers %>%
decompose() -> AirPassengers_decompose
AirPassengers_decompose$seasonal
AirPassengers_decompose_adj <- AirPassengers - AirPassengers_decompose$seasonal
plot(AirPassengers_decompose_adj)
AirPassengers %>%
as_tsibble()
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index))
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index)) %>%
facet_grid(Sensor ~ .)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, ts # modeling packages
)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble # modeling packages
)
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, # modeling packages
tseries, forecast)
AirPassengers %>%
stl(s.window = "periodic")
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
log() %>%
diff() %>%
adf.test(alternative = "stationary" k = 0))
AirPassengers %>%
log() %>%
diff() %>%
adf.test(alternative = "stationary", k=0)
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>%
tsdiag()
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24)
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24) -> forecast_Air
U <- forecast_Air$pred + 2*forecast_Air$se
L <- forecast_Air$pred - 2*forecast_Air$se
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)", col = c(1,2,4), lty = c(1,1,2)))
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)", col = c(1,2,4), lty = c(1,1,2)))
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col = c(1,2,4), lty = c(1,1,2)))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col = c(1,2,4), lty = c(1,1,2))
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24) -> forecast_Air
forecast_Air
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간격을 차분하여 주기에 따른 변화 상쇄
adf.test(alternative = "stationary", k=0)
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index))
AirPassengers %>%
decompose() -> AirPassengers_decompose
AirPassengers_decompose_adj <- AirPassengers - AirPassengers_decompose$seasonal
plot(AirPassengers_decompose_adj)
?ts.plot
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2),
xlab="year", ylab="counts")
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"),
col = c(1,2,4), lty = c(1,1,2))
?ts.plot
forecast_Air
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima()
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, # modeling packages
ggfortify, changepoint, strucchange, ggpmisc)
Nile
Nile %>%
auto.arima
Nile %>%
auto.arima %>%
forecast()
Nile %>%
auto.arima %>%
forecast() %>%
plot()
