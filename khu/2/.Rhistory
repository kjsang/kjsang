data(Adult)
Adults %>%
apriori(parameter = list(suppor = 0.001,
confidence = 0.5)) -> Adults_rules
data(Adult)
Adult %>%
apriori(parameter = list(suppor = 0.001,
confidence = 0.5)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
Adult_rules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Groceries %>%
apriori(parameter = list(support = 0.001,
confidence = 0.5)) -> rules
rules %>%
sort(by = "lift") %>%
head(10) -> subrules
plot(subrules,
method = "graph",
control = list(type = "items"))
# 2.1. 데이터 탐색: Adult
data(Adult)
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult %>%
apriori(parameter = list(support = 0.1,
confidence = 0.6),
appearance = list(rhs = c("income = small",
"income = large"),
default = "lhs"),
control = list(verbose = F)) -> Adult_rules
Adult_rules %>%
sort(by = "lift") %>%
head(10) -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
Adult_rules %>%
sort(by = "lift") -> Adult_subrules
plot(Adult_subrules,
method = "graph",
control = list(type = "items"))
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
Adult_rules %>%
sort(by = "lift") %>%
head(100)-> Adult_subrules
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
Adult_rules %>%
sort(by = "lift") -> Adult_subrules
plot(Adult_subrules,
method = "scatterplot",
control = list(type = "items"))
plot(Adult_subrules,
method = "graph",
control = list(type = "items", alpha = 0.5))
rm(list = ls)
rm(list = ls())
pacman::p_load(tidyverse, magrittr, # helper packages
tidymodels, tidygraph # modeling packages
)
pacman::p_load(tidyverse, magrittr, # helper packages
sna # modeling packages
)
rbind(
c(0,1,1,1,0),
c(1,0,0,1,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
rbind(
c(0,1,1,1,0),
c(1,0,0,0,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble # modeling packages
)
USAccDeaths %>% as_tsibble()
tourism
tourism %>%
filter(Purpose == "Holiday") %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
tourism %>%
mutate(Year = lubridate::year(Quarter)) %>%
index_by(Year) %>%
group_by(Region, State, Purpose) %>%
summarise(Trips = sum(Trips)) %>%
ungroup()
pedestrian %>%
mutate(
Day = lubridate::wday(Date, label = TRUE),
Weekend = (Day %in% c("Sun", "Sat"))
) %>%
ggplot(aes(x = Time, y = Count, group = Date)) +
geom_line(aes(col = Weekend)) +
facet_grid(Sensor ~ .)
USAccDeaths
USAccDeaths %>% as_tsibble()
AirPassengers %>%
as_tsibble()
pedestrian %>%
mutate(
Day = lubridate::wday(Date, label = TRUE),
Weekend = (Day %in% c("Sun", "Sat"))
) %>%
ggplot(aes(x = Time, y = Count, group = Date)) +
geom_line(aes(col = Weekend)) +
facet_grid(Sensor ~ .)
pedestrian
tourism
AirPassengers
tourism
tourism %>%
mutate(Year = lubridate::year(Quarter))
AirPassengers
tourism %>%
mutate(Year = lubridate::year(Quarter))
AirPassengers %>%
decompose()
AirPassengers %>%
decompose() %>%
tidy()
AirPassengers %>%
decompose() %>%
as_tibble()
AirPassengers %>%
decompose() %>%
as_tsibble()
AirPassengers %>%
decompose() %>%
unnest(seasonal)
AirPassengers %>%
decompose() -> AirPassengers_decompose
AirPassengers_decompose$seasonal
AirPassengers_decompose_adj <- AirPassengers - AirPassengers_decompose$seasonal
plot(AirPassengers_decompose_adj)
AirPassengers %>%
as_tsibble()
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index))
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index)) %>%
facet_grid(Sensor ~ .)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, ts # modeling packages
)
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble # modeling packages
)
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, # modeling packages
tseries, forecast)
AirPassengers %>%
stl(s.window = "periodic")
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
log() %>%
diff() %>%
adf.test(alternative = "stationary" k = 0))
AirPassengers %>%
log() %>%
diff() %>%
adf.test(alternative = "stationary", k=0)
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>%
tsdiag()
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24)
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24) -> forecast_Air
U <- forecast_Air$pred + 2*forecast_Air$se
L <- forecast_Air$pred - 2*forecast_Air$se
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)", col = c(1,2,4), lty = c(1,1,2)))
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)", col = c(1,2,4), lty = c(1,1,2)))
AirPassengers %>%
ts.plot(forecast_Air$pred,
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col = c(1,2,4), lty = c(1,1,2)))
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col = c(1,2,4), lty = c(1,1,2))
AirPassengers %>%
arima(order = c(2,1,1), list(order = c(0,1,0), period = 12)) %>%
predict(n.ahead = 24) -> forecast_Air
forecast_Air
AirPassengers %>%
ts(frequency = 12) %>%
decompose() %>%
plot()
AirPassengers %>%
stl(s.window = "periodic") %>%
plot()
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간격을 차분하여 주기에 따른 변화 상쇄
adf.test(alternative = "stationary", k=0)
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
AirPassengers %>%
as_tsibble() %>%
ggplot(aes(x = index, y = value)) +
geom_line(aes(col = index))
AirPassengers %>%
decompose() -> AirPassengers_decompose
AirPassengers_decompose_adj <- AirPassengers - AirPassengers_decompose$seasonal
plot(AirPassengers_decompose_adj)
?ts.plot
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2))
AirPassengers %>%
ts.plot(forecast_Air$pred, #
forecast_Air$pred + 2*forecast_Air$se,
forecast_Air$pred - 2*forecast_Air$se,
col = c(1,2,4,4),
lty = c(1,1,2,2),
xlab="year", ylab="counts")
legend("topleft",
c("Actual", "Forecast", "Error Bounds (95% Confidence)"),
col = c(1,2,4), lty = c(1,1,2))
?ts.plot
forecast_Air
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima()
AirPassengers %>%
log() %>% # 크기 변화 상쇄용
diff() %>% # 시간간갸ㅕㄱ 차분하여 주기에 따른 변화 상쇄
auto.arima() %>% # 자동으로 아리마분석
tsdiag() # 그림그려주기
pacman::p_load(tidyverse, magrittr, # helper packages
tsibble, # modeling packages
ggfortify, changepoint, strucchange, ggpmisc)
Nile
Nile %>%
auto.arima
Nile %>%
auto.arima %>%
forecast()
Nile %>%
auto.arima %>%
forecast() %>%
plot()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, magrittr, # helper packages
sna # modeling packages
)
rbind(
c(0,1,1,1,0),
c(1,0,0,0,0),
c(1,0,0,0,0),
c(1,1,0,0,1),
c(0,0,0,1,0)
) -> amatrix
sna::gden(amatrix)
degree(amatrix, gmode = "graph")
closeness(amatrix, gmode = "graph")
betweenness(amatrix, gmode = "graph")
gplot(amatrix)
gplot(amatrix, mode = "circle")
plot.sociomatrix(amatrix)
library(KoNLP)
install.packages("rJava")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages("tm")
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
multilinguer::install_jdk()
multilinguer::install_jdk()
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library(KoNLP)
install.packages("wordcloud")
install.packages("tm")
library(KoNLP)
library(KoNLP)
installed.packages("memoise")
installed.packages("memoise")
library('rJava')
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
multilinguer::install_jdk()
rJava::.jinit()
library(KoNLP)
library(KoNLP)
install.packages("rJava")
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
multilinguer::install_jdk()
rJava::.jinit()
rJava::.jinit()
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("multilinguer")
install.packages("multilinguer")
installed.packages("memoise")
library(KoNLP)
install.packages("rJava")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
library('KoNLP')
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
Sys.which("make")
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library('rJava')
library('memoise')
library('KoNLP')
dyn.load()
dyn.load(paste0(system2("/usr/libexec/java_home",stdout=T),
"/jre/lib/server/libjvm.dylib"))
dir(paste0(system2('/usr/libexec/java_home', stdout = TRUE)))
dir(paste0(system2('/usr/libexec/java_home', stdout = TRUE)))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
install.packages("KoNLP")
library(KoNLP)
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
library('rJava')
library('memoise')
library('KoNLP')
multilinguer::install_jdk()
rJava::.jinit()
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
install.packages("rJava", configure.args="--disable-jri"))
install.packages("rJava", configure.args="--disable-jri")
library('rJava')
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-16.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
library(rJava)
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
# https://www.java.com/ko/download/ 자바 설치
install.packages("rJava")
rJava::.jinit()
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
FilePath rLdScriptPath = options.scriptsPath().complete("session/r-ldpath");
FilePath supportingFilePath = options.supportingFilePath()
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
'/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib'
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
Sys.getenv("JAVA_HOME")
library(rJava)
library(KoNLP)
remove.packsges("rJava")
remove.packages("rJava")
remove.packages("rJava")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
multilinguer::install_jdk()
> library(multilinguer)
library(multilinguer)
multilinguer::install_jdk()
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
library(KoNLP)
library('rJava')
library("rcdk")
install.packages("rcdk")
library("rcdk")
library(rJava)
library(rJava)
library('KoNLP')
library('KoNLP')
library('KoNLP')
library('KoNLP')
useSejongDic()
extractNoun("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
SimplePos09("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
SimplePos22("롯데마트가 판매하고 있는 흑마늘 양념 치킨이 논란이 되고 있다.")
library(KoNLP)
